/*
Copyright [2016] [Dong Uk, Kang]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package org.uclab.mm.icl.llc.config;

import java.util.ArrayList;

import org.uclab.mm.icl.llc.LLCManager.ContextLabel;
import org.uclab.mm.icl.llc.restservices.RestClients;



/**
 * Enum to represent the different types of context which are generated by the different RecognizerType.
 * @author Nailbrainz
 *
 */
public enum ContextType {
	
	Activity(0), Emotion(1), Location(2), Food(3);
	
	
    private int value;
    private ContextType(int _value){
        value = _value;
    }
    
    private static final ArrayList<String[]> labels = new ArrayList<String[]>();
    
    
    static{
    	String[] actLabels = {"Eating","Running","Sitting"
    			,"Standing","Walking","Stretching","Sweeping","LyingDown","NoActivity"};
        String[] emoLabel = { "Angry", "Happiness", "Neutral", "Sadness", "NoEmotion" };
        //String[] places = {"Home", "Office", "NoLocation"};
        String[] places = {"Home", "Office", "Yard","Gym","Mall", "Restaurant", "NoLocation"};
        
        
        String[] directions = {"NoFood"};
        
        labels.add(actLabels);
        labels.add(emoLabel);
        labels.add(places);
        labels.add(directions);
    }
    
    //define the labels of each context type below. Note that, the last context should be No(contextName)
    
    
    
  
    
    /**
     * Returns the window size of the current context
     * @return window size of the current context
     */
    public int getDefaultWindowSize(){
    	ContextType ct = ContextType.values()[value];
    	switch(ct){
    	case Activity:
    		return 6;
    	case Emotion:
    		return 9;
    	case Location:
    		return 12;
    	case Food:
    		return 12;
    	}
    	return 0;
    }
    
    /**
	 * 
	 * @param llc low level context which will be transfered into DCL
	 * @return State string describing the operation
	 */
	public void notifyLLCToDCL(ContextLabel llc){
		String ret = "Err";
		ContextType ct = ContextType.values()[value];
		try {
			switch(ct){
			case Emotion:
				ret =  RestClients.addUserRecognizedEmotion(llc);
				break;
			case Activity:
				ret =  RestClients.addUserRecognizedAct(llc);
				break;
			case Location:
				ret =  RestClients.addUserDetectedLoc(llc);
				break;
			case Food:
				ret =  RestClients.AddFoodLog(llc);
				break;
			default:
				break;				
			}
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		//return ret;
	}
    
    
    /**
     * Returns the list of labels for the current context
     * @return label of the current context
     */
    public String[] getLabels(){
    	return labels.get(value);
    }
    
    /**
     * Returns the value for the current context, which is configed inside the enum
     * @return value of the current context
     */
    public int getValue(){
        return value;
    }
    
    
    /**
     * Returns basic ContextLabel instance of label No(ContextName), for each contextType
     * @param userID user Id to set on ContextLabel instance 
     * @param timeStamp timestamp to set on ContextLabel instance
     * @return Basic ContextLabel instance
     */
    public ContextLabel getBasicLabel(long userID, String timeStamp){
    	return new ContextLabel(userID, labels.get(value)[labels.get(value).length-1], timeStamp, ContextType.values()[value]);
    }
    
    /**
     * Returns  ContextLabel instance for each contextType
     * @param userID user Id to set on ContextLabel instance 
     * @param Label label to set on ContextLabel instance 
     * @param timeStamp timestamp to set on ContextLabel instance 
     * @return ContextLabel instance, corresponding to the parameters
     */
    public ContextLabel getContext(long userID, String Label, String timeStamp){
    	return new ContextLabel(userID, Label, timeStamp, ContextType.values()[value]);
    }
    
    
    /**
     * Returns the window size of the current context
     * @return window size of the current context
     */
    public int getWindowSize(){
    	return ICLConfig.contextWindowSize.get(value);
    }
    
    
}
